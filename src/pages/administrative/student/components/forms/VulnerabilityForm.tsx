import React, { FC } from 'react';
import { Formik, Form, FormikHelpers } from 'formik';
import Card, { CardHeader, CardBody } from '../../../../../components/ui/Card';
import Input from '../../../../../components/form/Input';
import Label from '../../../../../components/form/Label';
import FieldWrap from '../../../../../components/form/FieldWrap';
import Validation from '../../../../../components/form/Validation';
import Button from '../../../../../components/ui/Button';
import SelectReact from '../../../../../components/form/SelectReact';
import { Student, VulnerabilityRecord } from '../../../../../types/administrative/Student';
import { useUpdateVulnerabilityInfo } from '../../../../../api/students.api';



const boolean_options = [
  { value: true, label: 'Sí' },
  { value: false, label: 'No' },
];

export const VulnerabilityForm: FC<{
  student: Student;
}> = ({ student }) => {
  const { mutate } = useUpdateVulnerabilityInfo()

  return (
    <Formik<VulnerabilityRecord>
      enableReinitialize
      initialValues={{
        is_in_social_program: student.vulnerability_info?.is_in_social_program ?? false,
        social_program_name: student.vulnerability_info?.social_program_name ?? '',
        is_in_vulnerable_situation: student.vulnerability_info?.is_in_vulnerable_situation ?? false,
        vulnerability_description: student.vulnerability_info?.vulnerability_description ?? '',
      }}
      onSubmit={(values, actions: FormikHelpers<VulnerabilityRecord>) => {
        console.log('Guardar Vulnerabilidad:', values);
        actions.setSubmitting(false);

        mutate(
          { studentId: student.id, vulnerabilityInfo: values },
          { onSuccess: () => actions.setSubmitting(false)}
        )
  
        
      }}
    >
      {formik => (
        <Form onSubmit={formik.handleSubmit} className="space-y-4">
          <Card>
            <CardHeader>Información de Vulnerabilidad</CardHeader>
            <CardBody className="space-y-4">
              <div>
                <Label htmlFor="is_in_social_program">Está en Programa Social</Label>
                <Validation
                  isTouched={!!formik.touched.is_in_social_program}
                  isValid={!formik.errors.is_in_social_program}
                  invalidFeedback={''}
                >
                  <FieldWrap>
                    <SelectReact
                      inputId="is_in_social_program"
                      name="is_in_social_program"
                      options={boolean_options}
                      value={boolean_options.find(
                        o => o.value === formik.values.is_in_social_program
                      )}
                      onChange={(opt:any) =>
                        formik.setFieldValue('is_in_social_program', opt?.value)
                      }
                    />
                  </FieldWrap>
                </Validation>
              </div>
              {formik.values.is_in_social_program && (
                <div>
                  <Label htmlFor="social_program_name">Nombre del Programa</Label>
                  <Validation
                    isTouched={!!formik.touched.social_program_name}
                    isValid={!formik.errors.social_program_name}
                    invalidFeedback={formik.errors.social_program_name || ''}
                  >
                    <FieldWrap>
                      <Input
                        id="social_program_name"
                        name="social_program_name"
                        value={formik.values.social_program_name}
                        onChange={formik.handleChange}
                      />
                    </FieldWrap>
                  </Validation>
                </div>
              )}
              <div>
                <Label htmlFor="is_in_vulnerable_situation">Situación Vulnerable</Label>
                <Validation
                  isTouched={!!formik.touched.is_in_vulnerable_situation}
                  isValid={!formik.errors.is_in_vulnerable_situation}
                  invalidFeedback={''}
                >
                  <FieldWrap>
                    <SelectReact
                      inputId="is_in_vulnerable_situation"
                      name="is_in_vulnerable_situation"
                      options={boolean_options}
                      value={boolean_options.find(
                        o => o.value === formik.values.is_in_vulnerable_situation
                      )}
                      onChange={(opt: any) =>
  
                        formik.setFieldValue('is_in_vulnerable_situation', opt?.value)
                      }
                    />
                  </FieldWrap>
                </Validation>
              </div>
              {formik.values.is_in_vulnerable_situation && (
                <div>
                  <Label htmlFor="vulnerability_description">Descripción</Label>
                  <Validation
                    isTouched={!!formik.touched.vulnerability_description}
                    isValid={!formik.errors.vulnerability_description}
                    invalidFeedback={formik.errors.vulnerability_description || ''}
                  >
                    <FieldWrap>
                      <Input
                        id="vulnerability_description"
                        name="vulnerability_description"
                        value={formik.values.vulnerability_description}
                        onChange={formik.handleChange}
                      />
                    </FieldWrap>
                  </Validation>
                </div>
              )}
              <div className="flex justify-end mt-4">
                <Button 
                  onClick={() => formik.handleSubmit()}
                  isLoading={formik.isSubmitting}
                  variant="solid" 
                  color="blue">
                  Guardar Vulnerabilidad
                </Button>
              </div>
            </CardBody>
          </Card>
        </Form>
      )}
    </Formik>
  );
}